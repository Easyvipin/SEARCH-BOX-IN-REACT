{"version":3,"sources":["logo.svg","components/Test.js","components/Header.js","components/Load.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Test","checkResult","e","axios","get","target","value","then","resp","console","log","lists","data","Response","Search","map","item","Title","setState","result","place","document","getElementById","state","suggestList","this","index","className","key","onClick","bind","id","type","onKeyUp","placeholder","Component","Header","Load","src","alt","App","loading","React","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,2KCiE5BC,E,YA9Db,aAAe,IAAD,8BACZ,+CAMFC,YAAc,SAAAC,GACZC,IACGC,IADH,oDACoDF,EAAEG,OAAOC,QAC1DC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GAEZ,IAAIG,EAAQ,GACe,SAAvBH,EAAKI,KAAKC,UACZJ,QAAQC,IAAI,SACZC,EAAQH,EAAKI,KAAKE,OAAOC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,SAC1CR,QAAQC,IAAIC,GACZ,EAAKO,SAAS,CACZC,OAAQR,KAGV,EAAKO,SAAS,CACZC,OAAQ,SAvBJ,EA4BdC,MAAQ,SAAAJ,GACN,EAAKE,SAAS,CACZC,OAAQ,KAEVE,SAASC,eAAe,MAAMhB,MAAQU,GA9BtC,EAAKO,MAAQ,CACXJ,OAAQ,GACRb,MAAO,IAJG,E,sEAkCJ,IAAD,OACHkB,EAAcC,KAAKF,MAAMJ,OAAOJ,KAAI,SAACC,EAAMU,GAC7C,OACE,yBACEC,UAAU,UACVC,IAAKF,EACLG,QAAS,EAAKT,MAAMU,KAAK,EAAhB,UAAyBd,KAEjCA,MAIP,OACE,yBAAKW,UAAU,UACb,uBAAGI,GAAG,UAAN,8BACA,2BACEC,KAAK,SACLD,GAAG,KACHJ,UAAU,aACVM,QAASR,KAAKxB,YACdiC,YAAY,gBAEbV,O,GAzDUW,aCcJC,E,iLAZX,OACE,6BACE,yBAAKT,UAAU,UACb,uBAAGA,UAAU,QACX,oD,GANSQ,aCYNE,E,iLAXX,OACE,6BACE,yBAAKV,UAAU,QACb,yBAAKW,IAAI,cAAcX,UAAU,OAAOY,IAAI,wBAC5C,iD,GANSJ,aC6BJK,E,YAtBb,aAAe,IAAD,8BACZ,+CACKjB,MAAQ,CACXkB,SAAS,GAHC,E,iFAOZhB,KAAKP,SAAS,CACZuB,SAAS,M,+BAIX,OACE,yBAAKd,UAAU,QACW,IAAvBF,KAAKF,MAAMkB,QAAmB,kBAAC,EAAD,MAAW,GAC1C,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAjBUC,IAAMP,WCKJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,SD2H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.e4f56883.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass Test extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      result: [],\r\n      value: \"\"\r\n    };\r\n  }\r\n  checkResult = e => {\r\n    axios\r\n      .get(`http://www.omdbapi.com/?apikey=80f947ae&s=${e.target.value}`)\r\n      .then(resp => {\r\n        console.log(resp);\r\n        /* let response = document.getElementById(\"search\").value; */\r\n        let lists = [];\r\n        if (resp.data.Response === \"True\") {\r\n          console.log(\"hello\");\r\n          lists = resp.data.Search.map(item => item.Title);\r\n          console.log(lists);\r\n          this.setState({\r\n            result: lists\r\n          });\r\n        } else {\r\n          this.setState({\r\n            result: []\r\n          });\r\n        }\r\n      });\r\n  };\r\n  place = item => {\r\n    this.setState({\r\n      result: []\r\n    });\r\n    document.getElementById(\"in\").value = item;\r\n  };\r\n  render() {\r\n    let suggestList = this.state.result.map((item, index) => {\r\n      return (\r\n        <div\r\n          className=\"suggest\"\r\n          key={index}\r\n          onClick={this.place.bind(this, `${item}`)}\r\n        >\r\n          {item}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"search\">\r\n        <p id=\"quotes\">Let ME PREDICT THAT MOVIE </p>\r\n        <input\r\n          type=\"search\"\r\n          id=\"in\"\r\n          className=\"search-box\"\r\n          onKeyUp={this.checkResult}\r\n          placeholder=\"search here\"\r\n        ></input>\r\n        {suggestList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Header\">\r\n          <p className=\"last\">\r\n            <u>Built in React</u>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nclass Load extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"icon\">\r\n          <img src=\"Loading,gif\" className=\"load\" alt=\"loading please wait\" />\r\n          <h1>please wait</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Load;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Test from \"./components/Test\";\nimport Header from \"./components/Header\";\nimport Load from \"./components/Load\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      loading: false\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.loading === true ? <Load /> : \"\"}\n        <Header />\n        <Test />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}